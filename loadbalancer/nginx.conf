#Load Balancing:
#Nginx is configured as a reverse proxy and load balancer, distributing incoming requests across multiple backend services. This is common in 
#microservices architectures where you have multiple instances of the same service running, and you want to balance the load between them.

#The purpose of this configuration is to set up Nginx as a reverse proxy that can load balance requests between multiple backend servers.
#RUN rm /etc/nginx/conf.d/default.conf:

#upstream loadbalancer:

#This block defines a group of backend servers that Nginx can proxy requests to. In this case, two servers are defined:
#server1-service.default.svc.cluster.local
#server2-service.default.svc.cluster.local
#These are likely Kubernetes service DNS names, meaning Nginx will route traffic to these services within a Kubernetes cluster.

#server block:

#This block configures how Nginx should handle incoming HTTP requests.
#location /:
#This directive defines a location block that matches all requests (i.e., the root URL /).
#proxy_pass http://loadbalancer:
#This directive forwards all incoming requests to the upstream group named loadbalancer, 
#which then distributes the requests to the defined backend servers.

upstream loadbalancer{
    server server1-service.default.svc.cluster.local;
    server server2-service.default.svc.cluster.local;
}
server{
    location / {
        proxy_pass http://loadbalancer;
    }
}
